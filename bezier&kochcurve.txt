 Bezier Curve 

#include<windows.h>
#include <GL/glu.h>
#include <GL/glut.h> 
#include <GL/glut.h>      
#include <math.h>       
#include <iostream>     
 
 float ctrlPoints[4][2] = {
    {100.0, 100.0},   
    {150.0, 300.0},   
    {300.0, 300.0},   
    {350.0, 100.0}    
}; 
void drawBezierCurve() { 
    glColor3f(1.0, 0.0, 0.0);     
    glLineWidth(2.0);             
    glBegin(GL_LINE_STRIP);       
 
    for (float t = 0.0; t <= 1.0; t += 0.01) { 
         
        float x = pow(1 - t, 3) * ctrlPoints[0][0] + 
        3 * t * pow(1 - t, 2) * ctrlPoints[1][0] +                 
        3 * pow(t, 2) * (1 - t) * ctrlPoints[2][0] +                   
        pow(t, 3) * ctrlPoints[3][0]; 
 
        float y = pow(1 - t, 3) * ctrlPoints[0][1] +
        3 * t * pow(1 - t, 2) * ctrlPoints[1][1] +
        3 * pow(t, 2) * (1 - t) * ctrlPoints[2][1] +       
        pow(t, 3) * ctrlPoints[3][1]; 
 
        glVertex2f(x, y);  // Plot the calculated point 
    } 
 
    glEnd();  // End of line strip 
} 
 
void drawControlPoints() { 
    glPointSize(5.0);            // Point size    
    glColor3f(0.0, 0.0, 1.0);    // Blue color for control points     
    glBegin(GL_POINTS);         // Begin point drawing 
 
    for (int i = 0; i < 4; i++) { 
        glVertex2fv(ctrlPoints[i]);   
    } 
 
    glEnd();  // End of point drawing 
} void display() {  
    glClear(GL_COLOR_BUFFER_BIT);   
    drawControlPoints();   
    drawBezierCurve();              
    glFlush();                      
}
    void init() {    
    glClearColor(1.0, 1.0, 1.0, 1.0);      
    glMatrixMode(GL_PROJECTION);         
    gluOrtho2D(0, 500, 0, 500);        
} 
 
int main(int argc, char** argv) { 
    glutInit(&argc, argv);                                 
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);          
    glutInitWindowSize(500, 500);                     
    glutInitWindowPosition(100, 100);                      
    glutCreateWindow("Cubic Bezier Curve - OpenGL");       
    init();                                   
    glutDisplayFunc(display);                          
    glutMainLoop();                                        
    return 0; 
} 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
                                    Koch Curve 
 #include<windows.h>
#include <GL/glu.h>
#include <GL/glut.h>
#include <GL/glut.h>
 #include <cmath> 
void kochCurve(float x1, float y1, float x2, float y2, int depth) 
{     if (depth == 0) 
{    
      glBegin(GL_LINES);         
      glVertex2f(x1, y1);        
      glVertex2f(x2, y2); 
      glEnd();       
      return; 
    } 
    float x3 = (2 * x1 + x2) / 3;  
    float y3 = (2 * y1 + y2) / 3; 
 
    float x4 = (x1 + 2 * x2) / 3;    
    float y4 = (y1 + 2 * y2) / 3;    
    float dx = x4 - x3;   
    float dy = y4 - y3; 
 
    float x5 = x3 + (dx * cos(M_PI / 3) - dy * sin(M_PI / 3));   
    float y5 = y3 + (dx * sin(M_PI / 3) + dy * cos(M_PI / 3));  
    kochCurve(x1, y1, x3, y3, depth - 1);    
    kochCurve(x3, y3, x5, y5, depth - 1);   
    kochCurve(x5, y5, x4, y4, depth - 1);   
    kochCurve(x4, y4, x2, y2, depth - 1); 
} 
 
void display() { 
    glClear(GL_COLOR_BUFFER_BIT); 
    glColor3f(0.0, 0.0, 1.0); // Blue color 
 
    // Initial base line 
    kochCurve(100, 300, 500, 300, 4);  
 
    glFlush(); 
} 
 
void init() {     glClearColor(1.0, 1.0, 1.0, 1.0);  
    glMatrixMode(GL_PROJECTION); 
    gluOrtho2D(0, 600, 0, 600);        
} 
 
int main(int argc, char** argv) {    
  glutInit(&argc, argv);   
  glutInitDisplayMode(GLUT_SINGLE |GLUT_RGB); 
  glutInitWindowSize(600, 600);  
  glutInitWindowPosition(100, 100); 
  glutCreateWindow("Koch Curve - OpenGL"); 
  init(); 
  glutDisplayFunc(display);   
  glutMainLoop();     
return 0; 
} 
