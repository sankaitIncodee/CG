#include<windows.h>
#include <GL/glu.h>
#include <GL/glut.h>
#include <iostream>
using namespace std;
#include<string.h>
#include<GL/glut.h>
#include<math.h>
double Xmin, Ymin, Xmax, Ymax, X1, Y1, X2, Y2;
int x, y, temp;
const int L=8, R=4, B=2, T=1;
int calCode(double x, double y)
{
int code=0;
if(x>Xmax)
code= R;
if(x<Xmin)
code= L;
if(y>Ymax)
code= T;
if(y<Ymin)
code= B;
return(code);
}
void LineClip(double X1, double Y1, double X2, double Y2)
{
unsigned int outcode1 , outcode2;
int accept=0, done=0;
float M= float(Y2-Y1)/(X2-X1);
outcode1=calCode(X1,Y1);
outcode2=calCode(X2,Y2);
do
{
if(outcode1==0 && outcode2==0)
{
accept=1;
done=1;
}
else if((outcode1 & outcode2)!=0)
{
done=1;
}
else
{
if(outcode1==0)
temp=outcode2;
else
temp=outcode1;
if(temp & T)
{
y=Ymax;
x= X1 + (Ymax-Y1)/M;
}
else if(temp & B )
{
y= Ymin;
x= X1 + (Ymin-Y1)/M;
}
else if(temp & L)
{
x= Xmin;
y= Y1 + M*(Xmin-X1);
}
else if(temp & R)
{
x= Xmax;
y= Y1+ M*(Xmax-X1);
}
if(temp==outcode1)
{
X1= x;
Y1= y;
outcode1=calCode(X1,Y1);
}
if(temp==outcode2)
{
X2= x;
Y2= y;
outcode2=calCode(X2,Y2);
}
}
}while(done==0);
if(accept)
{
glColor3f(0.0,0.0,1.0);
glBegin(GL_LINES);
glVertex2d(X1,Y1);
glVertex2d(X2,Y2);
glEnd();
}
}
void display(void)
{
glClear(GL_COLOR_BUFFER_BIT);
glBegin(GL_LINE_LOOP);
glColor3f(1.0,1.0,1.0);
glVertex2d(Xmin,Ymin);
glVertex2d(Xmax,Ymin);
glVertex2d(Xmax,Ymax);
glVertex2d(Xmin,Ymax);
glEnd();
glBegin(GL_LINE_STRIP);
glVertex2d(X1,Y1);
glVertex2d(X2,Y2);
glEnd();
LineClip(X1,Y1,X2,Y2);
glFlush();
}
void myinit()
{
glClearColor(0.0,0.0,0.0,0.0);
glColor3f(0.0,0.0,0.0);
gluOrtho2D(0.0,650.0,0.0,650.0);
}
int main(int argc, char **argv)
{
cout<<"Enter the  coordinates of window:";
cout<<"\nEnter Point1( Xmin , Ymin):";
cin>>Xmin>>Ymin;
cout<<"\nEnter Point2( Xmax , Ymax):";
cin>>Xmax>>Ymax;
cout<<"Enter two end points of the line to be drawn:";
cout<<"\nEnter Point1( X1 , Y1):";
cin>>X1>>Y1;
cout<<"\nEnter Point2( X2 , Y2):";
cin>>X2>>Y2;
cout<<"\nAfter Clipping";
glutInit(&argc,argv);
glutInitDisplayMode(GLUT_SINGLE  | GLUT_RGB);
glutInitWindowSize(650,650);
glutInitWindowPosition(0,0);
glutCreateWindow("Line Clipping");
myinit();
glutDisplayFunc(display);
glutMainLoop();
return 0;
}
